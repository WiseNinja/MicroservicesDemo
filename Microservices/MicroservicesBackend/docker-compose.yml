version: '3.4'

services:
  mapentitiesservice:
    image: ${DOCKER_REGISTRY-}mapentitiesservice
    build:
      context: .
      dockerfile: MapEntitiesService/Dockerfile
    networks:
        - microserviceDemoNetwork
    depends_on:
        - rabbitmq
        - seq

  notificationsservice:
    image: ${DOCKER_REGISTRY-}notificationsservice
    build:
      context: .
      dockerfile: NotificationsService/Dockerfile
    networks:
        - microserviceDemoNetwork
    depends_on:
        - rabbitmq
        - seq

  mapsrepositoryservice:
    image: ${DOCKER_REGISTRY-}mapsrepositoryservice
    build:
      context: .
      dockerfile: MapsRepositoryService/Dockerfile
    networks:
        - microserviceDemoNetwork
    depends_on:
        - rabbitmq
        - minio
        - seq

  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    build:
      context: .
      dockerfile: OcelotApiGw/Dockerfile
    ports:
      - "5003:80"
    networks:
        - microserviceDemoNetwork
    depends_on:
        - seq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    networks:
        - microserviceDemoNetwork

  seq:
    image: datalust/seq:latest
    container_name: 'loggingservice'
    ports:
      - "80:80"
      - "5341:5341"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq-data:/data
    networks:
      - microserviceDemoNetwork

  minio:
    image: minio/minio
    container_name: 'minio'
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    volumes:
      - data:/data
    networks:
      - microserviceDemoNetwork

volumes:
  seq-data:
  data:

networks:
  microserviceDemoNetwork:
    driver: bridge